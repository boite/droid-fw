<?php

namespace Droid\Plugin\Fw\Generator;

use Droid\Model\Feature\Firewall\Firewall;
use Droid\Model\Feature\Firewall\Rule;

class UfwGenerator
{
    protected $firewall;

    public function __construct(Firewall $firewall)
    {
        $this->firewall = $firewall;
    }

    public function generate($hostname)
    {
        $rules = $this->firewall->getRulesByHostname($hostname);
        if (empty($rules)) {
            return null;
        }

        $o = array('# Generated by Droid: ' . date('d/M/Y H:i'));

        $o[] = 'ufw --force reset';

        foreach ($rules as $rule) {
            $o = array_merge($o, $this->generateRule($rule));
        }

        $o[] = 'ufw --force enable';
        $o[] = '';

        return implode("\n", $o);
    }

    /*
     * Full PF-style syntax: (https://wiki.ubuntu.com/UbuntuFirewallSpec#Command-line_Interface)
     *
     * ufw allow|deny [proto <protocol>] [from <address> [port <port>]] [to <address> [port <port>]]
     */
    public function generateRule(Rule $rule)
    {
        $addresses = $this->firewall->constructAddresses($rule->getAddress());
        $o = array();
        foreach ($addresses as $address) {
            $r = sprintf('ufw %s', $rule->getAction());
            if ($rule->getProtocol()) {
                $r .= sprintf(' proto %s', $rule->getProtocol());
            }
            if ($rule->getDirection() == 'outbound') {
                $r .= sprintf(' from any to %s', $rule->getAddress());
            } else {
                $r .= sprintf(' from %s to any', $rule->getAddress());
            }
            if ($rule->getPort()) {
                $r .= sprintf(' port %d', $rule->getPort());
            }
            $r .= sprintf(' # %s', $rule->getAddress());
            $o[] = $r;
        }
        return $o;
    }
}
